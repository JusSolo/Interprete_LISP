Index: src/main/java/uvg/edu/gt/Snippets.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uvg.edu.gt;\n\n<<<<<<< HEAD\n=======\nimport org.jetbrains.annotations.NotNull;\n\n>>>>>>> origin/master\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Stack;\n\n/**\n *\n */\npublic class Snippets {\n    private static List<String> fullLPL( List<String> programa){\n        Stack<String> parentesis = new Stack<>();\n        List<String> prog2 = new ArrayList<String>();\n<<<<<<< HEAD\n        StringBuilder l = new StringBuilder();\n        for (String linea : programa) {\n            linea.toLowerCase(); // nuestro interprete solo conoce minusculas\n            for (int j = 0; j < linea.length(); j++) {\n                char car = linea.charAt(j);\n                switch (car) {\n                    case '(':\n                        parentesis.add(\"-\");\n                        l.append(\" ( \");\n                        break;\n                    case ')':\n                        parentesis.pop();\n                        l.append(\" ) \");\n                        break;\n                    default:\n                        l.append(car);\n                }\n\n\n            }\n            if (parentesis.isEmpty()) {\n                prog2.add(l.toString());\n                l = new StringBuilder();\n=======\n        String l = \"\";\n        for (int i = 0; i < programa.size(); i++){\n            String linea = programa.get(i);\n            for (int j=0; j < linea.length(); j++ ){\n                char car = linea.charAt(j);\n                switch (car){\n                    case '(':\n                        parentesis.add(\"-\");\n                        l = l + \"( \";\n                        break;\n                    case ')':\n                        parentesis.pop();\n                        l = l + \" )\";\n                        break;\n                    default:\n                        l = l + car;\n                }\n\n\n                }\n            if (parentesis.isEmpty()){\n                prog2.add(l);\n                l = \"\";\n>>>>>>> origin/master\n            }\n        }\n        return prog2;\n\n    }\n\n    public static List<List<String>> romperCodigo(List<String> programa){\n        programa = fullLPL(programa);\n        List<List<String>> pedasos = new ArrayList<>();\n<<<<<<< HEAD\n        for (String s : programa) {\n            String[] linea = s.split(\" \");\n            pedasos.add(Arrays.asList(linea));\n        }\n=======\n        for (int i = 0; i < programa.size(); i++){\n            String[] linea = programa.get(i).split(\" \");\n            pedasos.add(Arrays.asList(linea));\n            }\n>>>>>>> origin/master\n        return pedasos;\n        }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Snippets.java b/src/main/java/uvg/edu/gt/Snippets.java
--- a/src/main/java/uvg/edu/gt/Snippets.java	(revision c22f88cfb4144e00c766a2d5b86e9cf15e0d149e)
+++ b/src/main/java/uvg/edu/gt/Snippets.java	(date 1709574407283)
@@ -1,10 +1,7 @@
 package uvg.edu.gt;
 
-<<<<<<< HEAD
-=======
 import org.jetbrains.annotations.NotNull;
 
->>>>>>> origin/master
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -17,31 +14,6 @@
     private static List<String> fullLPL( List<String> programa){
         Stack<String> parentesis = new Stack<>();
         List<String> prog2 = new ArrayList<String>();
-<<<<<<< HEAD
-        StringBuilder l = new StringBuilder();
-        for (String linea : programa) {
-            linea.toLowerCase(); // nuestro interprete solo conoce minusculas
-            for (int j = 0; j < linea.length(); j++) {
-                char car = linea.charAt(j);
-                switch (car) {
-                    case '(':
-                        parentesis.add("-");
-                        l.append(" ( ");
-                        break;
-                    case ')':
-                        parentesis.pop();
-                        l.append(" ) ");
-                        break;
-                    default:
-                        l.append(car);
-                }
-
-
-            }
-            if (parentesis.isEmpty()) {
-                prog2.add(l.toString());
-                l = new StringBuilder();
-=======
         String l = "";
         for (int i = 0; i < programa.size(); i++){
             String linea = programa.get(i);
@@ -50,23 +22,23 @@
                 switch (car){
                     case '(':
                         parentesis.add("-");
-                        l = l + "( ";
+                        l = l + " ( ";
                         break;
                     case ')':
                         parentesis.pop();
-                        l = l + " )";
+                        l = l + " ) ";
                         break;
                     default:
-                        l = l + car;
-                }
-
-
+                        l = l + Character.toLowerCase(car);
                 }
-            if (parentesis.isEmpty()){
-                prog2.add(l);
-                l = "";
->>>>>>> origin/master
+                if (parentesis.isEmpty()){
+                    prog2.add(l);
+                    l = "";
+                }
+
+
             }
+
         }
         return prog2;
 
@@ -75,18 +47,17 @@
     public static List<List<String>> romperCodigo(List<String> programa){
         programa = fullLPL(programa);
         List<List<String>> pedasos = new ArrayList<>();
-<<<<<<< HEAD
-        for (String s : programa) {
-            String[] linea = s.split(" ");
-            pedasos.add(Arrays.asList(linea));
-        }
-=======
         for (int i = 0; i < programa.size(); i++){
             String[] linea = programa.get(i).split(" ");
-            pedasos.add(Arrays.asList(linea));
+            List<String> linea2  = new ArrayList<>();
+            for (String str : linea) {
+                if (!str.isEmpty()) {
+                    linea2.add(str);
+                }
             }
->>>>>>> origin/master
+            if (!linea2.isEmpty())
+                pedasos.add(linea2);
+        }
         return pedasos;
-        }
-}
-
+    }
+}
\ No newline at end of file
Index: src/main/java/uvg/edu/gt/Evaluador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Evaluador.java b/src/main/java/uvg/edu/gt/Evaluador.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Evaluador.java	(date 1709573646916)
@@ -0,0 +1,62 @@
+package uvg.edu.gt;
+
+import java.util.List;
+import java.util.Stack;
+
+/**
+ *
+ */
+public class Evaluador {
+    public Stack<String> valores;
+    private Stack<String> operaciones;
+    private Stack<String> parentesis;
+    public Vocabulario vocabulario;
+
+    public Evaluador(){
+        valores = new Stack<String>();
+        operaciones = new Stack<String>();
+        parentesis = new Stack<String>();
+        vocabulario = Vocabulario.obtenerInstancia();
+    }
+
+    public  String  evaluar(List<String> comando){ //la creacion de funciones es un caso aparte, no es una operacion almenos para este interprete
+        if (comando.get(1).equals("defun")){
+            return Defun.DefFun(comando);
+        }
+        boolean precedQuote = false;
+        for (String v: comando){
+            switch (v){
+                case "(":
+                    //algo
+                    parentesis.add("-");
+                    break;
+                case ")":
+                    parentesis.pop();
+                    String op0 = operaciones.pop();
+                    Operador op = (Operador) vocabulario.interpretar(op0);
+                    op.operar(valores);
+                    break;
+                case "quote":
+                    precedQuote = true;
+                    operaciones.add(v);
+                    break;
+                default:
+                    //algo
+                    if (precedQuote) {
+                        precedQuote = false;
+                        valores.add(v);
+                    }
+                    else if (vocabulario.isOperador(v))
+                        operaciones.add(v);
+                    else
+                        valores.add(v);
+                    break;
+
+            }
+        }
+        if (valores.isEmpty())
+            return "";
+        return valores.pop();
+
+    }
+}
Index: src/main/java/uvg/edu/gt/Atom.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Atom.java b/src/main/java/uvg/edu/gt/Atom.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Atom.java	(date 1709573646916)
@@ -0,0 +1,16 @@
+package uvg.edu.gt;
+
+import java.util.Stack;
+
+public class Atom implements Operador{
+    @Override
+    public void operar(Stack<String> valores) {
+        Vocabulario voc = Vocabulario.obtenerInstancia();
+        String s = valores.pop();
+        if (voc.isAtom(s))
+            valores.add("t");
+        else
+            valores.add("nill");
+
+    }
+}
Index: src/test/java/uvg/edu/gt/EvaluadorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/uvg/edu/gt/EvaluadorTest.java b/src/test/java/uvg/edu/gt/EvaluadorTest.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/test/java/uvg/edu/gt/EvaluadorTest.java	(date 1709573646916)
@@ -0,0 +1,31 @@
+package uvg.edu.gt;
+
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.List;
+import static org.junit.jupiter.api.Assertions.*;
+
+class EvaluadorTest {
+
+    @Test
+    void evaluar() {
+        List<String> codigo =  Arrays.asList("(","+","5","(", "+" , "3", "4",")",")");
+        Evaluador evaluador = new Evaluador();
+        String resp = evaluador.evaluar(codigo);
+        assertEquals("12",resp);
+
+    }
+
+    @Test
+    void evaluarDefun() {// probando defun
+        List<String> L1 =  Arrays.asList("(","defun","sucesor","(", "n" , ")", "(","+","n","1",")",")");
+        List<String> L2 =  Arrays.asList("(","sucesor", "4", ")");
+        Evaluador evaluador = new Evaluador();
+        System.out.println(evaluador.evaluar(L1));
+        String resp = evaluador.evaluar(L2);
+
+        assertEquals("5",resp);
+
+    }
+}
\ No newline at end of file
Index: src/main/java/uvg/edu/gt/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package uvg.edu.gt;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello World!\" );\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/App.java b/src/main/java/uvg/edu/gt/App.java
--- a/src/main/java/uvg/edu/gt/App.java	(revision c22f88cfb4144e00c766a2d5b86e9cf15e0d149e)
+++ b/src/main/java/uvg/edu/gt/App.java	(date 1709573646916)
@@ -1,5 +1,7 @@
 package uvg.edu.gt;
 
+import java.util.HashMap;
+
 /**
  * Hello world!
  *
@@ -9,5 +11,11 @@
     public static void main( String[] args )
     {
         System.out.println( "Hello World!" );
+        HashMap<String,Object> memoire = new HashMap<>();
+        Integer x = 5;
+        memoire.put("x", x);
+        Integer toto = (int) memoire.get("x");
+        toto = 9;
+        System.out.println(memoire.get("x"));
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"79803137-7b0e-48ff-9101-7579cc4e1893\" name=\"Changes\" comment=\"Se creo la classe Leo para leer los archivos de texto con código\">\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/uvg/edu/gt/Tokenizer.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/uvg/edu/gt/Snippets.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/uvg/edu/gt/Snippets.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/src/test/java/uvg/edu/gt/SnippetsTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/test/java/uvg/edu/gt/SnippetsTest.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JUnit5 Test Class\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 3\n}</component>\n  <component name=\"ProjectId\" id=\"2cHhvc5SePhjv2XO0LHeTW1Hcyk\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;JUnit.SnippetsTest.romperCodigo.executor&quot;: &quot;Run&quot;,\n    &quot;Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/juan/Documentos/education/U/Semestres/Semestre_9/Algoritmos y Estructura&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateTestDialog.Recents.Supers\">\n      <recent name=\"\" />\n    </key>\n    <key name=\"CreateTestDialog.RecentsKey\">\n      <recent name=\"uvg.edu.gt\" />\n    </key>\n  </component>\n  <component name=\"RunManager\">\n    <configuration name=\"SnippetsTest.romperCodigo\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Interprete_LISP\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"uvg.edu.gt.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"uvg.edu.gt\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"uvg.edu.gt.SnippetsTest\" />\n      <option name=\"METHOD_NAME\" value=\"romperCodigo\" />\n      <option name=\"TEST_OBJECT\" value=\"method\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"JUnit.SnippetsTest.romperCodigo\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-4caba194b151-e47b9c39\" />\n        <option value=\"jdk-21.0.1-openjdk-21.0.1-f644763e9732-76dd8dae\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"79803137-7b0e-48ff-9101-7579cc4e1893\" name=\"Changes\" comment=\"\" />\n      <created>1707774645579</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1707774645579</updated>\n      <workItem from=\"1707774646916\" duration=\"12000\" />\n      <workItem from=\"1708007022352\" duration=\"6000\" />\n      <workItem from=\"1708008091366\" duration=\"7486000\" />\n      <workItem from=\"1708097901274\" duration=\"3264000\" />\n      <workItem from=\"1708361216399\" duration=\"2248000\" />\n      <workItem from=\"1708389542555\" duration=\"3064000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Se creo la classe Leo para leer los archivos de texto con código\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707776791474</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707776791474</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Se creo la classe Leo para leer los archivos de texto con código\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Se creo la classe Leo para leer los archivos de texto con código\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c22f88cfb4144e00c766a2d5b86e9cf15e0d149e)
+++ b/.idea/workspace.xml	(date 1709574896878)
@@ -4,32 +4,27 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="79803137-7b0e-48ff-9101-7579cc4e1893" name="Changes" comment="Se creo la classe Leo para leer los archivos de texto con código">
-      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Tokenizer.java" afterDir="false" />
+    <list default="true" id="79803137-7b0e-48ff-9101-7579cc4e1893" name="Changes" comment="Intento fusion">
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Atom.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Defun.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Evaluador.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Funcion.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Operador.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Suma.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Vocabulario.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/test/java/uvg/edu/gt/EvaluadorTest.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/App.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/App.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Snippets.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/uvg/edu/gt/Snippets.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/test/java/uvg/edu/gt/SnippetsTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/uvg/edu/gt/SnippetsTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="JUnit5 Test Class" />
-        <option value="Class" />
-      </list>
-    </option>
   </component>
   <component name="Git.Settings">
-    <option name="PUSH_AUTO_UPDATE" value="true" />
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="MarkdownSettingsMigration">
-    <option name="stateVersion" value="1" />
-  </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 3
 }</component>
@@ -39,34 +34,35 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;JUnit.SnippetsTest.romperCodigo.executor&quot;: &quot;Run&quot;,
-    &quot;Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
-    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
-    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/home/juan/Documentos/education/U/Semestres/Semestre_9/Algoritmos y Estructura&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Maven. [org.apache.maven.plugins:maven-archetype-plugin:RELEASE:generate].executor": "Run",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "Merging master",
+    "kotlin-language-version-configured": "true",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
-  <component name="RecentsManager">
-    <key name="CreateTestDialog.Recents.Supers">
-      <recent name="" />
-    </key>
-    <key name="CreateTestDialog.RecentsKey">
-      <recent name="uvg.edu.gt" />
-    </key>
-  </component>
-  <component name="RunManager">
+}]]></component>
+  <component name="RunManager" selected="JUnit.SnippetsTest.romperCodigo">
+    <configuration name="EvaluadorTest.evaluar" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
+      <module name="Interprete_LISP" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="uvg.edu.gt.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <option name="PACKAGE_NAME" value="uvg.edu.gt" />
+      <option name="MAIN_CLASS_NAME" value="uvg.edu.gt.EvaluadorTest" />
+      <option name="METHOD_NAME" value="evaluar" />
+      <option name="TEST_OBJECT" value="method" />
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
     <configuration name="SnippetsTest.romperCodigo" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="Interprete_LISP" />
       <extension name="coverage">
@@ -86,6 +82,7 @@
     <recent_temporary>
       <list>
         <item itemvalue="JUnit.SnippetsTest.romperCodigo" />
+        <item itemvalue="JUnit.EvaluadorTest.evaluar" />
       </list>
     </recent_temporary>
   </component>
@@ -93,7 +90,6 @@
     <attachedChunks>
       <set>
         <option value="jdk-21.0.1-openjdk-21.0.1-4caba194b151-e47b9c39" />
-        <option value="jdk-21.0.1-openjdk-21.0.1-f644763e9732-76dd8dae" />
       </set>
     </attachedChunks>
   </component>
@@ -106,21 +102,7 @@
       <option name="presentableId" value="Default" />
       <updated>1707774645579</updated>
       <workItem from="1707774646916" duration="12000" />
-      <workItem from="1708007022352" duration="6000" />
-      <workItem from="1708008091366" duration="7486000" />
-      <workItem from="1708097901274" duration="3264000" />
-      <workItem from="1708361216399" duration="2248000" />
-      <workItem from="1708389542555" duration="3064000" />
     </task>
-    <task id="LOCAL-00001" summary="Se creo la classe Leo para leer los archivos de texto con código">
-      <option name="closed" value="true" />
-      <created>1707776791474</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1707776791474</updated>
-    </task>
-    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -138,7 +120,8 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Se creo la classe Leo para leer los archivos de texto con código" />
-    <option name="LAST_COMMIT_MESSAGE" value="Se creo la classe Leo para leer los archivos de texto con código" />
+    <MESSAGE value="Creacion de mi rama" />
+    <MESSAGE value="Intento fusion" />
+    <option name="LAST_COMMIT_MESSAGE" value="Intento fusion" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/uvg/edu/gt/Funcion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Funcion.java b/src/main/java/uvg/edu/gt/Funcion.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Funcion.java	(date 1709573646916)
@@ -0,0 +1,78 @@
+package uvg.edu.gt;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Stack;
+
+public class Funcion implements Operador{
+    private String name;
+
+    private List<String> varNames ;
+
+
+    private List<String> instrucciones;
+
+    public Funcion(String name, List<String> varNames, List<String> instrucciones) {
+        this.name = name;
+        this.varNames = varNames;
+        this.instrucciones = instrucciones;
+
+    }
+
+    @Override
+    public void operar(Stack<String> valores) {
+        Stack<String> operaciones = new Stack<String>();
+        Stack<String> parentesis = new Stack<String>();
+        HashMap<String, String> variables = new HashMap<String,String>();
+        Vocabulario vocabulario = Vocabulario.obtenerInstancia();
+        // tomo de la pila los valores a operar
+        for (int i = 0; i < varNames.size(); i++){
+            variables.put(varNames.get(i),valores.pop());
+        }
+        // se evalua tomando el nombre de las variables
+        boolean precedQuote = false;
+        for (String V: instrucciones){
+            String v;
+            // revisa si v es una variable local
+            if (variables.containsKey(V))
+                v = variables.get(V);
+            else
+                v = V;
+            switch (v){
+                case "(":
+                    //algo
+                    parentesis.add("-");
+                    break;
+                case ")":
+                    parentesis.pop();
+                    String op0 = operaciones.pop();
+                    Operador op = (Operador) vocabulario.interpretar(op0);
+                    op.operar(valores);
+                    break;
+                case "quote":
+                    precedQuote = true;
+                    operaciones.add(v);
+                    break;
+                default:
+                    //algo
+                    if (precedQuote) {
+                        precedQuote = false;
+                        if (variables.containsKey(v))
+                            valores.add(variables.get(v));
+                        valores.add(v);
+                    }
+                    else if (vocabulario.isOperador(v))
+                        operaciones.add(v);
+
+                    else
+                        valores.add(v);
+                    break;
+
+            }
+        }
+
+
+
+
+    }
+}
Index: src/main/java/uvg/edu/gt/Defun.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Defun.java b/src/main/java/uvg/edu/gt/Defun.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Defun.java	(date 1709573646916)
@@ -0,0 +1,35 @@
+package uvg.edu.gt;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Defun {
+    static String DefFun(List<String> instruccuines){
+
+        String name = instruccuines.get(2) ;
+
+        int n = 4;
+        List<String> varNames = new ArrayList<String>();
+
+        for ( int i = 4; i < instruccuines.size();i++){
+            String v = instruccuines.get(i);
+            n++;
+            if (v.equals( ")" )){
+                break ;
+            }
+            varNames.add(v);
+        }
+
+
+        List<String>  inst =   new ArrayList<String>();
+        for (int i = n; i < (instruccuines.size() - 1) ; i++){
+            inst.add(instruccuines.get(i));
+        }
+
+        System.out.println(inst);
+        Operador f = new Funcion(name,varNames,inst);
+        Vocabulario mem = Vocabulario.obtenerInstancia();
+        mem.addMemori(name,f);
+        return name;
+    }
+}
Index: src/main/java/uvg/edu/gt/Operador.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Operador.java b/src/main/java/uvg/edu/gt/Operador.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Operador.java	(date 1709573646916)
@@ -0,0 +1,7 @@
+package uvg.edu.gt;
+
+import java.util.Stack;
+
+public interface Operador {
+    public void operar(Stack<String> valores);
+}
Index: src/main/java/uvg/edu/gt/Vocabulario.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Vocabulario.java b/src/main/java/uvg/edu/gt/Vocabulario.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Vocabulario.java	(date 1709573646916)
@@ -0,0 +1,55 @@
+package uvg.edu.gt;
+
+import java.util.HashMap;
+
+public class Vocabulario {
+    private static Vocabulario instancia = null;
+    private HashMap<String, Object> memoria;
+
+    private Vocabulario() {// con forme definamos las operaciones vamos llenando esto
+        memoria = new HashMap<>();
+        Operador o1 = new Suma();
+        memoria.put("+", o1);
+        Operador o2 = new Atom();
+        memoria.put("atom",o2);
+
+    }
+
+    public static Vocabulario obtenerInstancia() {
+        if (instancia == null) {
+            instancia = new Vocabulario();
+        }
+        return instancia;
+    }
+
+    public Object interpretar(String simbolo) {
+        if (memoria.containsKey(simbolo)) { // el símbolo es una variable
+            return memoria.get(simbolo);
+        }
+        if (isInt(simbolo)) { // el símbolo es un entero
+            return Integer.parseInt(simbolo);
+        }
+        return simbolo; // Si no es ni entero ni símbolo, debería ser una cadena
+    }
+
+    public boolean isOperador(String simbolo) {
+        return memoria.containsKey(simbolo) && memoria.get(simbolo) instanceof Operador;
+    }
+    public boolean isAtom(String simbolo){
+        return   memoria.containsKey(simbolo) || isInt(simbolo) ; // tentativo || isString(simbolo)
+    }
+
+    private boolean isInt(String str) {
+        try {
+            Integer.parseInt(str);
+            return true;
+        } catch (NumberFormatException e) {
+            return false;
+        }
+    }
+    public void addMemori(String name, Object value){
+        memoria.put(name,value);
+    }
+}
+
+
Index: src/main/java/uvg/edu/gt/Suma.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uvg/edu/gt/Suma.java b/src/main/java/uvg/edu/gt/Suma.java
new file mode 100644
--- /dev/null	(date 1709573646916)
+++ b/src/main/java/uvg/edu/gt/Suma.java	(date 1709573646916)
@@ -0,0 +1,20 @@
+package uvg.edu.gt;
+
+import java.util.Stack;
+
+public class Suma implements Operador{
+    @Override
+    public void operar(Stack<String> valores) {// suma es un operador binario
+        // tomo de la pila los valores a operar como suma es un operador binario tomo los ultimos dos valores
+        String a0 = valores.pop();
+        String b0 =  valores.pop();
+        // llamo al vocabulario (Esto incluye a variables)
+        Vocabulario vocabulario = Vocabulario.obtenerInstancia();
+        // Buscamos los valores en el vocabulario
+        Integer a = (int) vocabulario.interpretar(a0);
+        Integer b = (int) vocabulario.interpretar(b0);
+
+        Integer c = a + b;
+        valores.add(Integer.toString(c));
+    }
+}
